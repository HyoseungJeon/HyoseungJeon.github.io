<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on HyoSeung IT blog</title>
    <link>https://HyoseungJeon.github.io/posts/java/</link>
    <description>Recent content in Java on HyoSeung IT blog</description>
    <image>
      <title>HyoSeung IT blog</title>
      <url>https://HyoseungJeon.github.io/profile2.png</url>
      <link>https://HyoseungJeon.github.io/profile2.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 26 Apr 2024 16:55:04 +0900</lastBuildDate><atom:link href="https://HyoseungJeon.github.io/posts/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thread Local</title>
      <link>https://HyoseungJeon.github.io/posts/java/threadlocal/</link>
      <pubDate>Fri, 26 Apr 2024 16:55:04 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/threadlocal/</guid>
      <description>📌 개선하고 싶은 사항이 생겼다!! 현재 프로젝트에서는 등록자, 수정자 Id 값을 모든 Entity 담아 보내는 방식으로 N개의 List 데이터를 보낼 시 모든 객체에 중복되는 id 값을 모두 담고.. 또 넣어주는 소스도 존재하고 있다..!! 사실 이렇게 관리할 필요가 전혀 없어 보여서.. 개선을 해보기로 하였다!! 하여 작업 중 ThreadLocal Class를 보게 되었다!! Java에서 굉장히 초기버전 부터 지원해왔던 기능이라던데 굉장히 유용하고 또 실제로 많은 Lib에서 활용하고 있다는 걸 알게되었다!! 한번 자세히 알아보자~~😁😁 Thread Local 정의 This class provides thread-local variables.</description>
    </item>
    
    <item>
      <title>Blocking Queue</title>
      <link>https://HyoseungJeon.github.io/posts/java/blockingqueue/</link>
      <pubDate>Mon, 25 Mar 2024 11:28:24 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/blockingqueue/</guid>
      <description>💡 Logging 시스템을 개발하며 담당하신 AA 분께서 차후 트래픽 증가를 고려하여 다중 쓰레드 방식으로 작업해두신 소스를 설명해두셨다! 하여 내부 소스를 확인해보니 여러가지 내용 중Blocking Queue 라는 Class가 눈에 들어왔다!! 처음 보는 Class 이기도 하고.. 디버깅을 해보니 동작도 신기하였다!! 간단하게 한번 보자! Blocking Queue 정의 A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</description>
    </item>
    
    <item>
      <title>Function Package</title>
      <link>https://HyoseungJeon.github.io/posts/java/function-package/</link>
      <pubDate>Wed, 27 Dec 2023 14:59:39 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/function-package/</guid>
      <description>💡 Jobrunr로 개발된 Batch Project에 새로운 job을 개발하게 되었다! 기존에 Spring batch와 모습이 달라 구조에 대해서 파악하던 중 Job 구조를 Java Function Package 기술을 적극 활용하여 구현되어 있었다! 기존에 가볍게 넘어가던 부분을 이번 기회에 제대로 확인해보자 싶어서 알아보게 되었다!! 한번 같이 자세히 들여다보자~😁😁 Function Package 정의 Functional interfaces provide target types for lambda expressions and method references. Each functional interface has a single abstract method, called the functional method for that functional interface, to which the lambda expression&amp;rsquo;s parameter and return types are matched or adapted.</description>
    </item>
    
    <item>
      <title>Cursor</title>
      <link>https://HyoseungJeon.github.io/posts/java/cursor/</link>
      <pubDate>Thu, 23 Nov 2023 08:58:04 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/cursor/</guid>
      <description>💡 Batch 개발을 하는 도중 다른 job 소스를 참고하는데 엄청나게 많은 데이터를 읽어오는 reader 단을 짠 소스를 보았다..!! 이거 이렇게 읽어와도.. 문제가 없나?? 라는 생각이 들었고 내부 소스를 확인해보니.. Cursor 란 친구로 데이터를 읽어오고 있었다! 이전에 본 적이 없는 Class 였다!! 이 친구가 문제를 해결해 주고 있는 것 같아 내용이 궁금해져서 찾아보게 되었다!! Cursor란? 정의 Cursor contract to handle fetching items lazily using an Iterator. Cursors are a perfect fit to handle millions of items queries that would not normally fit in memory.</description>
    </item>
    
    <item>
      <title>Synchronized</title>
      <link>https://HyoseungJeon.github.io/posts/java/synchronized/</link>
      <pubDate>Tue, 17 Oct 2023 09:04:56 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/synchronized/</guid>
      <description>💡 Push Message Server에 문제가 발생했다! 등록된 결함의 내용은 간헐적으로 push 알림이 사용자에게 2건 씩 날라간다는 내용이였다. 그 이유는 무엇일까?? 이유는 Multi Thread 환경에서 Data의 동기 처리가 제대로 되어있지 않아서 였다.. 좀 더 잣세히 알아보자! Synchronized Synchronized란? The Java programming language provides two basic synchronization idioms: synchronized methods and synchronized statements. The more complex of the two, synchronized statements, are described in the next section. This section is about synchronized methods.</description>
    </item>
    
    <item>
      <title>File</title>
      <link>https://HyoseungJeon.github.io/posts/java/file/</link>
      <pubDate>Mon, 07 Aug 2023 16:19:24 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/file/</guid>
      <description>💡 사용자에게 현재 STATIC Directory에 있는 pdf File 들을 다운로드 기능과 함께 목록을 제공하는 기능을 구현하는 일을 받았다! 정적 자산을 객체로 받아 화면에 알맞게 던져주는 기능을 구현해보자!! 생각보다 자주 구현할 일이 있는 기능이지만 실제로는 처음 해봐서 재미있었다..😁👍 File Class 란? 정의 An abstract representation of file and directory pathnames.
User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames.</description>
    </item>
    
    <item>
      <title>Reflection</title>
      <link>https://HyoseungJeon.github.io/posts/java/reflection/</link>
      <pubDate>Fri, 21 Jul 2023 13:48:03 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/reflection/</guid>
      <description>Reflection이란? 정의 Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions. The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control.</description>
    </item>
    
    <item>
      <title>Generic</title>
      <link>https://HyoseungJeon.github.io/posts/java/generic/</link>
      <pubDate>Fri, 21 Jul 2023 08:27:33 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/generic/</guid>
      <description>Generic이란? Oracle Java Docs에서는 A generic type is a generic class or interface that is parameterized over types. 라고 설명하고 있다.
Type을 매개 변수로 받는 class, interface 라고 해석이 되는 듯하다..? 😂
즉, class를 정의할 때에 바깥에서 class 내부 field의 type를 정의할 수 있는 방법이다.
하여 객체를 선언할 때 class는 같지만 field Type이 다른 형태로 만들 수 있다. 우리가 가장 익숙한 곳은 아마 Collection Lib 를 사용할 때 일거다.</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://HyoseungJeon.github.io/posts/java/future/</link>
      <pubDate>Mon, 17 Jul 2023 13:03:35 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/future/</guid>
      <description>Future란? Java 1.5에 공개된 비동기 process 처리를 지원하는 interface Class 이다.
비동기 방식을 지원하기 위해 당연하게도 mulitThread 방식을 활용하여 해당 기능을 지원하고 있다. 기존의 Thread 직접 선언 및 관리 방식과 다르게 interface를 활용하여 비동기를 구현할 수 있어 안정적인 비동기 구현 방법이다.
해당 비동기 process를 호출 thread에서 사용 가능하다.
단, 해당 값 조회를 시도할 시 blocking 상태로 변화하여 지연이 발생할 수 있다.
Methods V get(), get(Long time, TimeUnit unit)
실행 결과 값을 조회하는 method</description>
    </item>
    
  </channel>
</rss>
