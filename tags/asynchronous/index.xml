<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Asynchronous on HyoSeung IT blog</title>
    <link>https://HyoseungJeon.github.io/tags/asynchronous/</link>
    <description>Recent content in Asynchronous on HyoSeung IT blog</description>
    <image>
      <title>HyoSeung IT blog</title>
      <url>https://avatars.githubusercontent.com/u/39950673?s=400&u=729b17ca9c5632e754da66f17f45eb61aeea271e&v=4</url>
      <link>https://avatars.githubusercontent.com/u/39950673?s=400&u=729b17ca9c5632e754da66f17f45eb61aeea271e&v=4</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 20 Jul 2023 11:07:59 +0900</lastBuildDate><atom:link href="https://HyoseungJeon.github.io/tags/asynchronous/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Async</title>
      <link>https://HyoseungJeon.github.io/posts/spring/async/</link>
      <pubDate>Thu, 20 Jul 2023 11:07:59 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/spring/async/</guid>
      <description>알게된 계기 이전 포스팅에서 Java의 Future 관련한 내용을 작성했었다. 그 내용을 요약하면 메일, 문자 발송 시스템의 처리 시간이 너무 불필요하게 길다는 것 이였다. 그 문제의 원인은 결국 blocking 발생 이였다. 하지만 Future 를 통하여 구현된 부분은 request 송신에 공통으로 사용된 부분 이였고 이와 별개로 내부 process Logic내에서 필요 없는 cost를 통해 지연이 발생하였고 하여 이를 병렬 처리하는 것이 필요했다. 하여 내용을 찾아보던 중 Spring에서 비동기 method 기능을 지원한다는 것을 발견하였다.</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://HyoseungJeon.github.io/posts/java/future/</link>
      <pubDate>Mon, 17 Jul 2023 13:03:35 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/future/</guid>
      <description>Future란? Java 1.5에 공개된 비동기 process 처리를 지원하는 interface Class 이다.
비동기 방식을 지원하기 위해 당연하게도 mulitThread 방식을 활용하여 해당 기능을 지원하고 있다. 기존의 Thread 직접 선언 및 관리 방식과 다르게 interface를 활용하여 비동기를 구현할 수 있어 안정적인 비동기 구현 방법이다.
해당 비동기 process를 호출 thread에서 사용 가능하다.
단, 해당 값 조회를 시도할 시 blocking 상태로 변화하여 지연이 발생할 수 있다.
Methods V get(), get(Long time, TimeUnit unit)
실행 결과 값을 조회하는 method</description>
    </item>
    
  </channel>
</rss>
