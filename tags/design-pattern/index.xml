<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Pattern on HyoSeung IT blog</title>
    <link>https://HyoseungJeon.github.io/tags/design-pattern/</link>
    <description>Recent content in Design Pattern on HyoSeung IT blog</description>
    <image>
      <title>HyoSeung IT blog</title>
      <url>https://avatars.githubusercontent.com/u/39950673?s=400&u=729b17ca9c5632e754da66f17f45eb61aeea271e&v=4</url>
      <link>https://avatars.githubusercontent.com/u/39950673?s=400&u=729b17ca9c5632e754da66f17f45eb61aeea271e&v=4</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 24 Jul 2023 09:29:01 +0900</lastBuildDate><atom:link href="https://HyoseungJeon.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Strategy Pattern</title>
      <link>https://HyoseungJeon.github.io/posts/designpattern/strategypattern/</link>
      <pubDate>Mon, 24 Jul 2023 09:29:01 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/designpattern/strategypattern/</guid>
      <description>전략 패턴 (Strategy Pattern) 정의 전략 패턴(strategy pattern) 또는 정책 패턴(policy pattern)은 실행 중에 알고리즘을 선택할 수 있게 하는 행위 소프트웨어 디자인 패턴이다. 전략 패턴은
특정한 계열의 알고리즘들을 정의하고 각 알고리즘을 캡슐화하며 이 알고리즘들을 해당 계열 안에서 상호 교체가 가능하게 만든다. 전략은 알고리즘을 사용하는 클라이언트와는 독립적으로 다양하게 만든다.[1] 전략은 유연하고 재사용 가능한 객체 지향 소프트웨어를 어떻게 설계하는지 기술하기 위해 디자인 패턴의 개념을 보급시킨 디자인 패턴(Gamma 등)이라는 영향력 있는 책에 포함된 패턴들 가운데 하나이다.</description>
    </item>
    
  </channel>
</rss>
