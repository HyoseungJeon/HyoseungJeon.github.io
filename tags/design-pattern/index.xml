<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Pattern on HyoSeung IT blog</title>
    <link>https://HyoseungJeon.github.io/tags/design-pattern/</link>
    <description>Recent content in Design Pattern on HyoSeung IT blog</description>
    <image>
      <title>HyoSeung IT blog</title>
      <url>https://HyoseungJeon.github.io/profile2.png</url>
      <link>https://HyoseungJeon.github.io/profile2.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 24 Jul 2023 09:29:01 +0900</lastBuildDate><atom:link href="https://HyoseungJeon.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Strategy Pattern</title>
      <link>https://HyoseungJeon.github.io/posts/designpattern/behavioral-patterns/strategypattern/</link>
      <pubDate>Mon, 24 Jul 2023 09:29:01 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/designpattern/behavioral-patterns/strategypattern/</guid>
      <description>💡 주로 Business Logic 을 작성하거나 혹은 보게 될 때 방대한 if else 분기와 보일러 플레이트들을 마주하게 된다!! 이는 Debuging 과정을 힘들게 하여.. 결국 지속적으로 안좋은 코드를 만들게 된다.. 하여 간단한 전략 패턴을 배워보고 활용해보자!! 전략 패턴이란? (Strategy Pattern) 정의 전략 패턴(strategy pattern) 또는 정책 패턴(policy pattern)은 실행 중에 알고리즘을 선택할 수 있게 하는 행위 소프트웨어 디자인 패턴이다. 전략 패턴은
특정한 계열의 알고리즘들을 정의하고 각 알고리즘을 캡슐화하며 이 알고리즘들을 해당 계열 안에서 상호 교체가 가능하게 만든다.</description>
    </item>
    
  </channel>
</rss>
