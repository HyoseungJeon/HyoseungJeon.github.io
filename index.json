[{"content":" 설명 Spring 2.0 부터 추가된 기능으로 Request 인입 후 thread 생성 된 시점부터 전 구간에서 HttpServletRequest에 접근을 가능하게 해주는 기능이다.\n기존 Controller 단에 parameter 형식으로 선언 후 참고하던 방식과 다르게 위 객체를 통하여 request에 접근이 가능하다.\n예제 소스 :\n@GetMapping(\u0026#34;hello\u0026#34;) public void before(HttpServletRequest request) { sampleService.hello(request); } @GetMapping(\u0026#34;hello\u0026#34;) public void after() { HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest(); sampleService.hello(request); } 동작 원리 Request 인입 시 Spring 내 ThreadLocal 이라는 공간에 값을 저장하는 방식이다. 이름에서도 유추할 수 있듯이 단일 Thread내에 저장되는 방식으로 이외 Thread에서는 값 참조가 불가능하게 된다. 단, Inheritable = true 옵션값을 통하여 중첩 Thread 내에서 부모 Thread 값 참조가 가능하다. 자세한 내용은 ref site 참고\n장점 1차적인 장점으로는 request 객체를 참조하기 위해 매번 parameter에 선언한 필요가 없다는 것이다. 불필요한 코드 작성을 줄이고 가독성을 높여준다.\n전 구간에서 참조 가능하다. Controller에서 request 정보를 받아 다른 Service 내리거나 하는 작업이 생략된다.\n→ 위 점을 활용하여 request 정보를 활용하는 공통 Util class를 구현한다면 베스트 인 것 같다!!\n내 활용 방식 진행하던 프로젝트 내에서 Exception 발생 시 공통으로 인입 된 값을 logging 하는 방식에 활용했다. 기존 APM을 통하여 body 내 값이나 query 방식의 값들을 최적화된 log 값들과 함께 같이 세팅하여 기록하도록 구현하였다.\nrefs: RequestContextHolder (Spring Framework 6.0.11 API)\nRequestContextHolder\nSpring RequestContextHolder - 어디서든 HttpServletReqeust 사용하기\nSpring RequestContextHolder\n","permalink":"https://HyoseungJeon.github.io/posts/spring/requestcontextholder/","summary":"설명 Spring 2.0 부터 추가된 기능으로 Request 인입 후 thread 생성 된 시점부터 전 구간에서 HttpServletRequest에 접근을 가능하게 해주는 기능이다.\n기존 Controller 단에 parameter 형식으로 선언 후 참고하던 방식과 다르게 위 객체를 통하여 request에 접근이 가능하다.\n예제 소스 :\n@GetMapping(\u0026#34;hello\u0026#34;) public void before(HttpServletRequest request) { sampleService.hello(request); } @GetMapping(\u0026#34;hello\u0026#34;) public void after() { HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest(); sampleService.hello(request); } 동작 원리 Request 인입 시 Spring 내 ThreadLocal 이라는 공간에 값을 저장하는 방식이다.","title":"RequestContextHolder"},{"content":" 개발 블로그를 처음으로 개설했다..!\n사실 이전부터 블로그를 만들어 보려고 했지만 그 필요성을 잘 느끼지 못하여.. 만들지 않았다..! 무언가 다른 개발자들에게 정확하지 않은 정보를 전달하게 되거나 혹은 그냥 포트폴리오를 보여주기 위한 도구 같다고만 느꼈다..\n근데 실제 취업 후 여러 프로젝트를 진행해보며 여러 장애들을 겪고 또 야근을 하며 개발을 해보며 지내본 결과.. 내 경험을 모두 머리속에 기억하기는 정말로 어렵다.. 기존에는 노트나 메모지에 적어두고 기록해 왔었는데 실제로 해당 내용을 다시 찾을 때에는 너무 시간이 오래 걸리고 때때로 급한 마음에 마구마구 갈겨 쓴 글씨 때문에 나 조차도 못알아보는 기록들이 너무 많았다 ㅠ\u0026hellip;\n해서!! 이제부터는 내 블로그를 통해 내가 기억해야 할 경험들을 기록해두려고 한다..! 화이팅\u0026hellip;!!!\n","permalink":"https://HyoseungJeon.github.io/posts/%EC%9D%BC%EA%B8%B0%EC%9E%A5/23-07-18/","summary":"개발 블로그를 처음으로 개설했다..!\n사실 이전부터 블로그를 만들어 보려고 했지만 그 필요성을 잘 느끼지 못하여.. 만들지 않았다..! 무언가 다른 개발자들에게 정확하지 않은 정보를 전달하게 되거나 혹은 그냥 포트폴리오를 보여주기 위한 도구 같다고만 느꼈다..\n근데 실제 취업 후 여러 프로젝트를 진행해보며 여러 장애들을 겪고 또 야근을 하며 개발을 해보며 지내본 결과.. 내 경험을 모두 머리속에 기억하기는 정말로 어렵다.. 기존에는 노트나 메모지에 적어두고 기록해 왔었는데 실제로 해당 내용을 다시 찾을 때에는 너무 시간이 오래 걸리고 때때로 급한 마음에 마구마구 갈겨 쓴 글씨 때문에 나 조차도 못알아보는 기록들이 너무 많았다 ㅠ\u0026hellip;","title":"23.07.18"},{"content":" dateObj.setDate(dayValue) var theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(24); // 1962-07-24 theBigDay.setDate(22); // 1962-08-22 해당 Date 객체의 날짜(day)를 설정하는 함수\n입력된 dayValue 값으로 날짜를 변경 한다.\n별로 특이해 보이지 않지만 변경 이라는 부분 때문에 보이지 않는 에러가 발생한 경우가 있다.\n위 기능을 통하여 js 내에서 날짜를 변경 하게 되는데\nvar theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(32); // 1962-08-01 theBigDay.setDate(0); // 1962-07-31 예제와 같이 날짜 범위를 자동으로 계산해 Date를 set 한다.\nvar theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(threeDaysAgo.getDate() + 3); // 1962-07-10 theBigDay.setDate(threeDaysAgo.getDate() - 3); // 1962-07-07 해서 Date를 더하거나 빼는 경우에는 자신의 Date 값을 참조하여 다시 setDate 하는 방식을 사용한다.\n하지만!! 문제는 자신의 값을 참조하는 부분에서 오류가 발생한다.\n/** * 시작날짜, 종료날짜 세팅 * * @param { Number } dayNum 날짜 수 * @returns { Date } { startDate, endDate } */ export function initRangeDate(dayNum) { const baseDate = 2 const startDate = new Date() const endDate = new Date() startDate.setDate(startDate.getDate() + baseDate) /* 날짜 adding 관련 이슈사항 */ // 1. 다른 Date 객체 참조 endDate.setDate(startDate.getDate() + dayNum) // 2. 자신 Date 참조 endDate.setDate(endDate.getDate() + baseDate + dayNum) /* setDate는 param의 숫자 그대로 setting 때문에 다른 객체 참고시 해당 객체의 값 변화에 의하여 의도하지 않은 날짜로 set 가능성 생김 때문에 무조건 자신을 참고하는 방식으로 사용 소스에 기준이 되는 전역값 분리 및 활용 */ return { startDate, endDate } } 위 예제는 현재 날짜 기준, param1 만큼 날짜의 범위를 가진 두 데이터 객체를 반환하는 method 이다.\n위 소스에서 1. 부분을 본다면 나는\n종료 일자를 시작 일자의 param1 값 만큼 더하여 종료 일자를 계산할 수 있다고 생각했다.\n하지만 실제로 소스에서는 문제가 발생한다!\nstartDate.getDate() + baseDate 의 값이 다음달의 날짜로 넘어가지 않는다면 문제가 발생하지 않지만, 넘어 간다면? n달의 오차가 생기게 된다!\n해서 프로젝트 내에서는 실제로 달의 마지막 2일 전, baseDate만큼의 차이가 날 때 문제가 발견되었다.. 테스트 기간에는 다행히..? 중순 쯤이라 문제를 발견하지 못하였다.. 내 잘못이다..\n실제로 new Date().getDate() 의 return 값은 날짜이기 때문에 변하지 않은 자신의 값을 참조하여 setDate를 할 때에는 문제가 발생하지 않는다.\n하지만 이외의 객체를 참고한다면 위와 같이 예상치 못한 값 변화를 초래할 수 있다..!\n결론은 굉장히 단순하지만\n// 1. 다른 Date 객체 참조 endDate.setDate(startDate.getDate() + dayNum) // 2. 자신 Date 참조 endDate.setDate(endDate.getDate() + baseDate + dayNum) js 내에선 Date 값을 조절할 때에는 무조건 자신의 객체를 참고하여 setting 되어야 한다는 사실이다.\n아무래도 java나 C++ 언어에 익숙했던 경험 때문인지 1. 와 같은 소스가 문제가 없을 것이라고 판단했던 것 같다.. 혹은 해당 setDate를 addDate 라고 나도 모르게 인식하고 있었던 것 같다.\n항상 정확한 사용 방법을 따라 개발해야 한다..!\n참조\nDate.prototype.setDate() - JavaScript | MDN\n","permalink":"https://HyoseungJeon.github.io/posts/javascript/date/setdate/","summary":"dateObj.setDate(dayValue) var theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(24); // 1962-07-24 theBigDay.setDate(22); // 1962-08-22 해당 Date 객체의 날짜(day)를 설정하는 함수\n입력된 dayValue 값으로 날짜를 변경 한다.\n별로 특이해 보이지 않지만 변경 이라는 부분 때문에 보이지 않는 에러가 발생한 경우가 있다.\n위 기능을 통하여 js 내에서 날짜를 변경 하게 되는데\nvar theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(32); // 1962-08-01 theBigDay.setDate(0); // 1962-07-31 예제와 같이 날짜 범위를 자동으로 계산해 Date를 set 한다.","title":"setDate"},{"content":" 프로젝트를 옮기고 Spring 프로젝트를 세팅 하는 중 build error가 발생하였다!\n그 중 익숙하지 않은 build error가 있었는데\nThymeleaf 관련 Directory를 추적하지 못하여 file not found Error가 나왔다..!\n알고 보니 따로 Template Engine을 설정하여 Project를 생성한 경우가 아닐 시 자동으로 추적 경로가 등록되지 않는 경우 같더라..\n내용을 추가적으로 찾아보니 Maven의 경우 따로 실행 Configurations 내 Working Directory 잡아주어야 한다는 내용을 찾았다..!\nThymeleaf 프로젝트 build 시 Maven 관리 도구를 사용 중이고 따로 importing 한 프로젝트 라면 /WEB-INF/\nDirectory를 자동으로 추적하지 못하는 경우가 발생할 수 있다!!\n때문에 해당 프로젝트 실행 환경의 Working directory 내에\n$MODULE_WORKING_DIR$\n경로를 추가하여야 한다.\n참조\nhttps://stackoverflow.com/questions/33459740/error-no-url-for-servletcontext-resource-when-running-spring-integrated-test\n","permalink":"https://HyoseungJeon.github.io/posts/intellij/thymeleaf/","summary":"프로젝트를 옮기고 Spring 프로젝트를 세팅 하는 중 build error가 발생하였다!\n그 중 익숙하지 않은 build error가 있었는데\nThymeleaf 관련 Directory를 추적하지 못하여 file not found Error가 나왔다..!\n알고 보니 따로 Template Engine을 설정하여 Project를 생성한 경우가 아닐 시 자동으로 추적 경로가 등록되지 않는 경우 같더라..\n내용을 추가적으로 찾아보니 Maven의 경우 따로 실행 Configurations 내 Working Directory 잡아주어야 한다는 내용을 찾았다..!\nThymeleaf 프로젝트 build 시 Maven 관리 도구를 사용 중이고 따로 importing 한 프로젝트 라면 /WEB-INF/","title":"Thymeleaf"},{"content":"","permalink":"https://HyoseungJeon.github.io/spring/","summary":"","title":"Spring"},{"content":"","permalink":"https://HyoseungJeon.github.io/ch/","summary":"","title":"첫 포스트"}]