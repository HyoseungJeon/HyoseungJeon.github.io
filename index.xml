<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HyoSeung IT blog</title>
    <link>https://HyoseungJeon.github.io/</link>
    <description>Recent content on HyoSeung IT blog</description>
    <image>
      <title>HyoSeung IT blog</title>
      <url>https://HyoseungJeon.github.io/profile.png</url>
      <link>https://HyoseungJeon.github.io/profile.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 17 Oct 2023 09:04:56 +0900</lastBuildDate><atom:link href="https://HyoseungJeon.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synchronized</title>
      <link>https://HyoseungJeon.github.io/posts/java/synchronized/</link>
      <pubDate>Tue, 17 Oct 2023 09:04:56 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/synchronized/</guid>
      <description>💡 Push Message Server에 문제가 발생했다! 등록된 결함의 내용은 간헐적으로 push 알림이 사용자에게 2건 씩 날라간다는 내용이였다. 그 이유는 무엇일까?? 이유는 Multi Thread 환경에서 Data의 동기 처리가 제대로 되어있지 않아서 였다.. 좀 더 잣세히 알아보자! Synchronized Synchronized란? The Java programming language provides two basic synchronization idioms: synchronized methods and synchronized statements. The more complex of the two, synchronized statements, are described in the next section. This section is about synchronized methods.</description>
    </item>
    
    <item>
      <title>Nud 메모리누수</title>
      <link>https://HyoseungJeon.github.io/posts/window/nud%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%88%84%EC%88%98/</link>
      <pubDate>Mon, 18 Sep 2023 08:34:54 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/window/nud%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%88%84%EC%88%98/</guid>
      <description>💡 프로젝트 투입 후 새로운 노트북을 지원 받아 일을 하게 됐다! 근데.. 시간이 지날수록 Intellij의 성능이 매우 느려졌고.. 컴퓨터의 기능이 정지하는 수준까지 가게 되었다.. 해서 작업관리자를 먼저 확인해보니 Memory의 점유율이 이상했다.. 노트북은 16GB의 Memory를 갖고 있었는데 실제로 가용한 메모리의 양이 11GB 정도였다! 해서 추가적으로 확인해보니 Memory의 비페이징 풀 이라는 항목이 3.5GB 정도를 점유하고 있었다.. 하여 그 문제점을 해결하던 중 window의 NUD 를 발견하게 되었다..! 이 문제를 좀 알아보자.. Window NUD NDU란?</description>
    </item>
    
    <item>
      <title>Nice본인인증이슈대응2</title>
      <link>https://HyoseungJeon.github.io/posts/api/nice%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EC%9D%B4%EC%8A%88%EB%8C%80%EC%9D%912/</link>
      <pubDate>Fri, 15 Sep 2023 09:41:20 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/api/nice%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EC%9D%B4%EC%8A%88%EB%8C%80%EC%9D%912/</guid>
      <description>Nice본인인증 이슈2 문제 본인인증 기능이 운영기에 배포 후 얼마 지나지 않아 특정 사용자가 인증에 지속적으로 실패하는 문제가 발생했다!
원인 Kibana Log를 살펴본 결과 Nice의 본인인증 완료 후 화면에 encoding Data를 받아 복호화 하는 과정중에 에러가 발생했다! 그리고 복호화 실패의 원인은 유효한 encoding Data가 아닌 값을 받아 발생하였다.
하여 해당 사용자의 request URI를 기준으로 local에서 test 해본 결과 encdoing Data가 변조 되어 controller 단에서 받아 문제가 생겼다! 하여 변조된 과정을 따라가보니 Nice 본인인증에서 Get 방식으로 URI에 data를 담아 보내주는데, base64 encoding 방식을 사용하여 특수문자가 포함된 param을 보내고 있었다!</description>
    </item>
    
    <item>
      <title>Nice본인인증 이슈대응</title>
      <link>https://HyoseungJeon.github.io/posts/api/nice%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EC%9D%B4%EC%8A%88%EB%8C%80%EC%9D%91/</link>
      <pubDate>Mon, 28 Aug 2023 10:20:45 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/api/nice%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EC%9D%B4%EC%8A%88%EB%8C%80%EC%9D%91/</guid>
      <description>Nice본인인증 이슈 문제 issue로 올라온 사항은 Android, IOS App 단에서 본인인증이 제대로 실행되지 않는다는 사항이였다! 본인인증 popup에서 인증을 완료 시 정상적으로 처리되지 않고 에러페이지로 이동하는 상황 이였다.
원인 문제의 원인은 본인인증 Callback method가 실행되지 않는 상황이였다!!
현재 구현된 프로젝트는 하이브리드 App방식으로 Android, IOS 각 OS의 Webview를 통해 App을 구현하고 있었다! 하지만 내가 기존에 구현한 방식은 해당 환경까지 듣지 못하여 App 환경까지 고려하여 구현을 하지 않았다.. 🤦‍♂️ 기존에는 Web의 BOM을 활용하여 opener.</description>
    </item>
    
    <item>
      <title>Custom Validate</title>
      <link>https://HyoseungJeon.github.io/posts/javascript/validate/</link>
      <pubDate>Wed, 23 Aug 2023 10:30:10 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/javascript/validate/</guid>
      <description>JQuery Custom Validate 개발 방향 지난번 JQuery Validate Plugin은 rule과 message를 mapping 해서 할당 후 노출하는 구조였다! 해서 내가 해결하려고 했던 정적으로 message를 계속 선언하는 부분이 개선되지 않았다. 해서 field의 attribute 값들로 모든 setting이 가능한 방식으로 구현을 해보려고 한다…! 😁😁
소스 validateForm(formId) { const formTag = $(`#${formId}`) // form tag check if (!formTag.is(&amp;#34;form&amp;#34;)) { console.error(`${formId} is not Form tag or can&amp;#39;t find!! check id`) alert(&amp;#34;사용자 에러 메세지 노출&amp;#34;); return false; } // 하위 all input, select element 조회 for(let element of formTag.</description>
    </item>
    
    <item>
      <title>JQuery Validate</title>
      <link>https://HyoseungJeon.github.io/posts/jquery/validate/</link>
      <pubDate>Wed, 16 Aug 2023 16:46:12 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/jquery/validate/</guid>
      <description>💡 프로젝트 투입 후 맡게 된 화면에서 가변 Input field가 추가되었는데 Validate 부분이 분기 문으로 처리되어 있었다..! 해서 결국 관련된 소스를 하나하나 찾아서 추가하고 영향도 있는 부분은 수정하는 작업을 했다… 사실상 요구사항은 간단했지만 필요 이상으로 작업이 오래 걸렸다! 그럼으로 기존 분기 처리로 된 Validate가 아닌 jQuery 기반의 Validate로 구현을 한번 해보자! JQuery Validate? 정의 The jQuery Validation Plugin provides drop-in validation for your existing forms, while making all kinds of customizations to fit your application really easy.</description>
    </item>
    
    <item>
      <title>FCM</title>
      <link>https://HyoseungJeon.github.io/posts/api/fcm/</link>
      <pubDate>Thu, 10 Aug 2023 09:45:10 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/api/fcm/</guid>
      <description>💡 새로운 프로젝트에서 Push 알림 기능을 담당하게 됐다! 웹 개발을 하면서 한번도 접해보지 못했었는데 문자/이메일 은 너무 많이 경험해본 것 같아 Push를 해보겠다고 하였다!!😁😁 좋은 경험이 되기를!!!! FCM이란? 정의 Firebase Cloud Messaging(FCM)은 메시지를 안정적으로 무료 전송할 수 있는 크로스 플랫폼 메시징 솔루션입니다. 출처 - https://firebase.google.com/docs/cloud-messaging?hl=ko
기능 알림 메시지 또는 데이터 메시지 전송 사용자에게 표시되는 알림 메시지를 전송합니다. 또는 데이터 메시지를 전송하고 애플리케이션 코드에서 임의로 처리합니다. 자세한 내용은 https://firebase.google.com/docs/cloud-messaging/concept-options?hl=ko#notifications_and_data_messages을 참조하세요. 다양한 메시지 타겟팅 단일 기기, 기기 그룹, 주제를 구독한 기기 등 3가지 방식으로 클라이언트 앱에 메시지를 배포할 수 있습니다.</description>
    </item>
    
    <item>
      <title>File</title>
      <link>https://HyoseungJeon.github.io/posts/java/file/</link>
      <pubDate>Mon, 07 Aug 2023 16:19:24 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/file/</guid>
      <description>💡 사용자에게 현재 STATIC Directory에 있는 pdf File 들을 다운로드 기능과 함께 목록을 제공하는 기능을 구현하는 일을 받았다! 정적 자산을 객체로 받아 화면에 알맞게 던져주는 기능을 구현해보자!! 생각보다 자주 구현할 일이 있는 기능이지만 실제로는 처음 해봐서 재미있었다..😁👍 File Class 란? 정의 An abstract representation of file and directory pathnames.
User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames.</description>
    </item>
    
    <item>
      <title>Nice 본인인증</title>
      <link>https://HyoseungJeon.github.io/posts/api/nice%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D/</link>
      <pubDate>Thu, 27 Jul 2023 15:13:07 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/api/nice%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D/</guid>
      <description>💡 새로운 Project에 투입되어 바로 Nice 본인 인증 API 기능을 추가하는 작업을 배정 받았다! Spring JSP, thymeleaf 각 project에 추가를 하면 된다!! 여기 저기서 사용하는 외부 API 로 실제 내가 개발해보는 재미를 느껴보자😍 Nice 본인인증 이란? NICE 평가정보 회사에서 제공하는 본인 확인 서비스로 사용자의 주민등록번호 등과 같은 정보를 통해 실명 확인 과정을 거쳐 사용자의 명의를 확인할 수 있는 기능을 제공하는 API 이다.
아마 내 생각엔 국내에서 개인 인증을 해야 하는 모든 사이트들이 API를 사용하여 인증을 하고 있을 것이다!</description>
    </item>
    
    <item>
      <title>Strategy Pattern</title>
      <link>https://HyoseungJeon.github.io/posts/designpattern/behavioral-patterns/strategypattern/</link>
      <pubDate>Mon, 24 Jul 2023 09:29:01 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/designpattern/behavioral-patterns/strategypattern/</guid>
      <description>💡 주로 Business Logic 을 작성하거나 혹은 보게 될 때 방대한 if else 분기와 보일러 플레이트들을 마주하게 된다!! 이는 Debuging 과정을 힘들게 하여.. 결국 지속적으로 안좋은 코드를 만들게 된다.. 하여 간단한 전략 패턴을 배워보고 활용해보자!! 전략 패턴이란? (Strategy Pattern) 정의 전략 패턴(strategy pattern) 또는 정책 패턴(policy pattern)은 실행 중에 알고리즘을 선택할 수 있게 하는 행위 소프트웨어 디자인 패턴이다. 전략 패턴은
특정한 계열의 알고리즘들을 정의하고 각 알고리즘을 캡슐화하며 이 알고리즘들을 해당 계열 안에서 상호 교체가 가능하게 만든다.</description>
    </item>
    
    <item>
      <title>Reflection</title>
      <link>https://HyoseungJeon.github.io/posts/java/reflection/</link>
      <pubDate>Fri, 21 Jul 2023 13:48:03 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/reflection/</guid>
      <description>Reflection이란? 정의 Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions. The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control.</description>
    </item>
    
    <item>
      <title>Generic</title>
      <link>https://HyoseungJeon.github.io/posts/java/generic/</link>
      <pubDate>Fri, 21 Jul 2023 08:27:33 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/generic/</guid>
      <description>Generic이란? Oracle Java Docs에서는 A generic type is a generic class or interface that is parameterized over types. 라고 설명하고 있다.
Type을 매개 변수로 받는 class, interface 라고 해석이 되는 듯하다..? 😂
즉, class를 정의할 때에 바깥에서 class 내부 field의 type를 정의할 수 있는 방법이다.
하여 객체를 선언할 때 class는 같지만 field Type이 다른 형태로 만들 수 있다. 우리가 가장 익숙한 곳은 아마 Collection Lib 를 사용할 때 일거다.</description>
    </item>
    
    <item>
      <title>Async</title>
      <link>https://HyoseungJeon.github.io/posts/spring/async/</link>
      <pubDate>Thu, 20 Jul 2023 11:07:59 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/spring/async/</guid>
      <description>알게된 계기 이전 포스팅에서 Java의 Future 관련한 내용을 작성했었다. 그 내용을 요약하면 메일, 문자 발송 시스템의 처리 시간이 너무 불필요하게 길다는 것 이였다. 그 문제의 원인은 결국 blocking 발생 이였다. 하지만 Future 를 통하여 구현된 부분은 request 송신에 공통으로 사용된 부분 이였고 이와 별개로 내부 process Logic내에서 필요 없는 cost를 통해 지연이 발생하였고 하여 이를 병렬 처리하는 것이 필요했다. 하여 내용을 찾아보던 중 Spring에서 비동기 method 기능을 지원한다는 것을 발견하였다.</description>
    </item>
    
    <item>
      <title>23.07.18</title>
      <link>https://HyoseungJeon.github.io/posts/%EC%9D%BC%EA%B8%B0%EC%9E%A5/23-07-18/</link>
      <pubDate>Tue, 18 Jul 2023 14:47:51 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/%EC%9D%BC%EA%B8%B0%EC%9E%A5/23-07-18/</guid>
      <description>개발 블로그를 처음으로 개설했다..!
사실 이전부터 블로그를 만들어 보려고 했지만 그 필요성을 잘 느끼지 못하여.. 만들지 않았다..! 무언가 다른 개발자들에게 정확하지 않은 정보를 전달하게 되거나 혹은 그냥 포트폴리오를 보여주기 위한 도구 같다고만 느꼈다..
근데 실제 취업 후 여러 프로젝트를 진행해보며 여러 장애들을 겪고 또 야근을 하며 개발을 해보며 지내본 결과.. 내 경험을 모두 머리속에 기억하기는 정말로 어렵다.. 기존에는 노트나 메모지에 적어두고 기록해 왔었는데 실제로 해당 내용을 다시 찾을 때에는 너무 시간이 오래 걸리고 때때로 급한 마음에 마구마구 갈겨 쓴 글씨 때문에 나 조차도 못알아보는 기록들이 너무 많았다 ㅠ&amp;hellip;</description>
    </item>
    
    <item>
      <title>setDate</title>
      <link>https://HyoseungJeon.github.io/posts/javascript/date/setdate/</link>
      <pubDate>Tue, 18 Jul 2023 11:13:10 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/javascript/date/setdate/</guid>
      <description>dateObj.setDate(dayValue) var theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(24); // 1962-07-24 theBigDay.setDate(22); // 1962-08-22 해당 Date 객체의 날짜(day)를 설정하는 함수
입력된 dayValue 값으로 날짜를 변경 한다.
별로 특이해 보이지 않지만 변경 이라는 부분 때문에 보이지 않는 에러가 발생한 경우가 있다.
위 기능을 통하여 js 내에서 날짜를 변경 하게 되는데
var theBigDay = new Date(1962, 6, 7); // 1962-07-07 theBigDay.setDate(32); // 1962-08-01 theBigDay.setDate(0); // 1962-07-31 예제와 같이 날짜 범위를 자동으로 계산해 Date를 set 한다.</description>
    </item>
    
    <item>
      <title>Thymeleaf</title>
      <link>https://HyoseungJeon.github.io/posts/intellij/thymeleaf/</link>
      <pubDate>Tue, 18 Jul 2023 11:13:10 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/intellij/thymeleaf/</guid>
      <description>프로젝트를 옮기고 Spring 프로젝트를 세팅 하는 중 build error가 발생하였다!
그 중 익숙하지 않은 build error가 있었는데
Thymeleaf 관련 Directory를 추적하지 못하여 file not found Error가 나왔다..!
알고 보니 따로 Template Engine을 설정하여 Project를 생성한 경우가 아닐 시 자동으로 추적 경로가 등록되지 않는 경우 같더라..
내용을 추가적으로 찾아보니 Maven의 경우 따로 실행 Configurations 내 Working Directory 잡아주어야 한다는 내용을 찾았다..!
Thymeleaf 프로젝트 build 시 Maven 관리 도구를 사용 중이고 따로 importing 한 프로젝트 라면 /WEB-INF/</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://HyoseungJeon.github.io/posts/java/future/</link>
      <pubDate>Mon, 17 Jul 2023 13:03:35 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/java/future/</guid>
      <description>Future란? Java 1.5에 공개된 비동기 process 처리를 지원하는 interface Class 이다.
비동기 방식을 지원하기 위해 당연하게도 mulitThread 방식을 활용하여 해당 기능을 지원하고 있다. 기존의 Thread 직접 선언 및 관리 방식과 다르게 interface를 활용하여 비동기를 구현할 수 있어 안정적인 비동기 구현 방법이다.
해당 비동기 process를 호출 thread에서 사용 가능하다.
단, 해당 값 조회를 시도할 시 blocking 상태로 변화하여 지연이 발생할 수 있다.
Methods V get(), get(Long time, TimeUnit unit)
실행 결과 값을 조회하는 method</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>https://HyoseungJeon.github.io/spring/</link>
      <pubDate>Thu, 13 Jul 2023 11:26:21 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/spring/</guid>
      <description></description>
    </item>
    
    <item>
      <title>첫 포스트</title>
      <link>https://HyoseungJeon.github.io/ch/</link>
      <pubDate>Thu, 13 Jul 2023 09:44:22 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/ch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RequestContextHolder</title>
      <link>https://HyoseungJeon.github.io/posts/spring/requestcontextholder/</link>
      <pubDate>Fri, 07 Jul 2023 10:47:43 +0900</pubDate>
      
      <guid>https://HyoseungJeon.github.io/posts/spring/requestcontextholder/</guid>
      <description>설명 Spring 2.0 부터 추가된 기능으로 Request 인입 후 thread 생성 된 시점부터 전 구간에서 HttpServletRequest에 접근을 가능하게 해주는 기능이다.
기존 Controller 단에 parameter 형식으로 선언 후 참고하던 방식과 다르게 위 객체를 통하여 request에 접근이 가능하다.
예제 소스 :
@GetMapping(&amp;#34;hello&amp;#34;) public void before(HttpServletRequest request) { sampleService.hello(request); } @GetMapping(&amp;#34;hello&amp;#34;) public void after() { HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest(); sampleService.hello(request); } 동작 원리 Request 인입 시 Spring 내 ThreadLocal 이라는 공간에 값을 저장하는 방식이다.</description>
    </item>
    
    <item>
      <title>My 1st post</title>
      <link>https://HyoseungJeon.github.io/test1/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://HyoseungJeon.github.io/test1/</guid>
      <description>Desc Text.</description>
    </item>
    
    
    
  </channel>
</rss>
